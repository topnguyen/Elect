<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Elect.Data.EF</name>
    </assembly>
    <members>
        <member name="T:Elect.Data.EF.Interfaces.Entity.IVersionEntity">
            <summary>
                Resolve concurrency issue. 
            </summary>
        </member>
        <member name="M:Elect.Data.EF.Interfaces.Repository.IBaseEntityRepository`1.Get(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
             Get Entities
            </summary>
            <param name="predicate"></param>
            <param name="isIncludeDeleted">[Note] We use query.IgnoreQueryFilters() when <paramref name="isIncludeDeleted"/> is <c>true</c></param> 
            <param name="includeProperties"></param>
            <returns></returns>
            <remarks>[Note] We use query.IgnoreQueryFilters() when <paramref name="isIncludeDeleted"/> is <c>true</c></remarks>
        </member>
        <member name="M:Elect.Data.EF.Interfaces.Repository.IBaseEntityRepository`1.Add(`0)">
            <summary>
                Add Entity
            </summary>
            <param name="entity"></param>
            <returns></returns>
            <remarks>
                <para>We will auto set DeletedTime to <c>null</c>, set LastUpdatedTime and CreatedTime to <c>DateTimeOffset.UtcNow</c> if not set before</para>
                <para>You can override the DeletedTime, LastUpdatedTime and CreatedTime by override StandardizeEntities in UnitOfWork/BaseEntityUnitOfWork</para>
            </remarks>
        </member>
        <member name="M:Elect.Data.EF.Interfaces.Repository.IBaseEntityRepository`1.AddRange(`0[])">
            <summary>
                Add Entities
            </summary>
            <param name="entities"></param>
            <returns></returns>
            <remarks>
                <para>We will auto set DeletedTime to <c>null</c>, set LastUpdatedTime and CreatedTime to <c>DateTimeOffset.UtcNow</c> if not set before</para>
                <para>You can override the DeletedTime, LastUpdatedTime and CreatedTime by override StandardizeEntities in UnitOfWork/BaseEntityUnitOfWork</para>
            </remarks>
        </member>
        <member name="M:Elect.Data.EF.Interfaces.Repository.IBaseEntityRepository`1.Update(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
                Update Entity
            </summary>
            <param name="entity"></param>
            <param name="changedProperties">Specific properties changed</param>
            <returns></returns>
            <remarks>
                <para>We will auto set LastUpdatedTime to <c>DateTimeOffset.UtcNow</c> if not set before</para>
                <para>You can override the LastUpdatedTime by override StandardizeEntities in UnitOfWork/BaseEntityUnitOfWork</para>
            </remarks>
        </member>
        <member name="M:Elect.Data.EF.Interfaces.Repository.IBaseEntityRepository`1.Update(`0,System.String[])">
            <summary>
                Update Entity
            </summary>
            <param name="entity"></param>
            <param name="changedProperties">Specific properties changed</param>
            <returns></returns>
            <remarks>
                <para>We will auto set LastUpdatedTime to <c>DateTimeOffset.UtcNow</c> if not set before</para>
                <para>You can override the LastUpdatedTime by override StandardizeEntities in UnitOfWork/BaseEntityUnitOfWork</para>
            </remarks>
        </member>
        <member name="M:Elect.Data.EF.Interfaces.Repository.IBaseEntityRepository`1.Update(`0)">
            <summary>
                Update Entity by whole properties
            </summary>
            <param name="entity"></param>
            <returns></returns>
            <remarks>
                <para>We will auto set LastUpdatedTime to <c>DateTimeOffset.UtcNow</c> if not set before</para>
                <para>You can override the LastUpdatedTime by override StandardizeEntities in UnitOfWork/BaseEntityUnitOfWork</para>
            </remarks>
        </member>
        <member name="M:Elect.Data.EF.Interfaces.Repository.IBaseEntityRepository`1.DeleteWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
                Delete Where by match condition of predicate
            </summary>
            <param name="predicate"></param>
            <param name="isPhysicalDelete"></param>
            <remarks>
                <para>When isPhysicalDelete is <c>true</c>, it's mean auto include soft delete record in query/predicate</para>
                <para>We will auto set DeletedTime to <c>DateTimeOffset.UtcNow</c> if not set before</para>
                <para>You can override the DeletedTime by override StandardizeEntities in UnitOfWork/BaseEntityUnitOfWork</para>
            </remarks>
        </member>
        <member name="M:Elect.Data.EF.Interfaces.Repository.IEntityRepository`2.UpdateWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
                Update Entities
            </summary>
            <param name="predicate">Update Where by match condition of predicate</param>
            <param name="entityNewData">New Data</param>
            <param name="changedProperties">Specific properties changed</param>
            <returns></returns>
            <remarks>
                <para>We will auto set LastUpdatedTime to <c>DateTimeOffset.UtcNow</c> if not set before</para>
                <para>You can override the LastUpdatedTime by override StandardizeEntities in UnitOfWork/BaseEntityUnitOfWork</para>
            </remarks>
        </member>
        <member name="M:Elect.Data.EF.Interfaces.Repository.IEntityRepository`2.UpdateWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0,System.String[])">
            <summary>
                Update Entities
            </summary>
            <param name="predicate">Update Where by match condition of predicate</param>
            <param name="entityNewData">New Data</param>
            <param name="changedProperties">Specific properties changed</param>
            <returns></returns>
            <remarks>
                <para>We will auto set LastUpdatedTime to <c>DateTimeOffset.UtcNow</c> if not set before</para>
                <para>You can override the LastUpdatedTime by override StandardizeEntities in UnitOfWork/BaseEntityUnitOfWork</para>
            </remarks>
        </member>
        <member name="M:Elect.Data.EF.Interfaces.Repository.IEntityRepository`2.DeleteWhere(System.Collections.Generic.List{`1},System.Boolean)">
            <summary>
                Delete Where by list id
            </summary>
            <param name="ids">list id use for identity the entities</param>
            <param name="isPhysicalDelete"></param>
            <remarks>
                <para>When isPhysicalDelete is <c>true</c>, it's mean auto include soft delete record in query/predicate</para>
                <para>We will auto set DeletedTime to <c>DateTimeOffset.UtcNow</c> if not set before</para>
                <para>You can override the DeletedTime by override StandardizeEntities in UnitOfWork/BaseEntityUnitOfWork</para>
            </remarks>
        </member>
        <member name="M:Elect.Data.EF.Interfaces.Repository.IStringEntityRepository`1.UpdateWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
                Update Entities
            </summary>
            <param name="predicate">Update Where by match condition of predicate</param>
            <param name="entityNewData">New Data</param>
            <param name="changedProperties">Specific properties changed</param>
            <returns></returns>
            <remarks>
                <para>We will auto set LastUpdatedTime to <c>DateTimeOffset.UtcNow</c> if not set before</para>
                <para>You can override the LastUpdatedTime by override StandardizeEntities in UnitOfWork/BaseEntityUnitOfWork</para>
            </remarks>
        </member>
        <member name="M:Elect.Data.EF.Interfaces.Repository.IStringEntityRepository`1.UpdateWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0,System.String[])">
            <summary>
                Update Entities
            </summary>
            <param name="predicate">Update Where by match condition of predicate</param>
            <param name="entityNewData">New Data</param>
            <param name="changedProperties">Specific properties changed</param>
            <returns></returns>
            <remarks>
                <para>We will auto set LastUpdatedTime to <c>DateTimeOffset.UtcNow</c> if not set before</para>
                <para>You can override the LastUpdatedTime by override StandardizeEntities in UnitOfWork/BaseEntityUnitOfWork</para>
            </remarks>
        </member>
        <member name="M:Elect.Data.EF.Interfaces.Repository.IStringEntityRepository`1.DeleteWhere(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
                Delete Where by list id
            </summary>
            <param name="ids">list id use for identity the entities</param>
            <param name="isPhysicalDelete"></param>
            <remarks>
                <para>When isPhysicalDelete is <c>true</c>, it's mean auto include soft delete record in query/predicate</para>
                <para>We will auto set DeletedTime to <c>DateTimeOffset.UtcNow</c> if not set before</para>
                <para>You can override the DeletedTime by override StandardizeEntities in UnitOfWork/BaseEntityUnitOfWork</para>
            </remarks>
        </member>
        <member name="P:Elect.Data.EF.Models.EntityStateModel.ModifiedFields">
            <summary>
                Fields have IsModified is true, included Field Name and Field Value
            </summary>
        </member>
        <member name="P:Elect.Data.EF.Models.EntityStateModel.TempFieldNames">
            <summary>
                Indicating whether the value of this property is considered a
                temporary value which will be replaced by a value generated from the store when
                <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />is called.
            </summary>
        </member>
        <member name="M:Elect.Data.EF.Utils.ModelBuilderUtils.ModelBuilderExtensions.AddConfigFromAssembly(Microsoft.EntityFrameworkCore.ModelBuilder,System.Reflection.Assembly)">
            <summary>
                Scan and apply Config/Mapping for Tables/Entities 
            </summary>
            <param name="builder"> </param>
            <param name="assembly"></param>
        </member>
        <member name="M:Elect.Data.EF.Utils.ModelBuilderUtils.ModelBuilderExtensions.AddConfigFromAssembly``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.Reflection.Assembly)">
            <summary>
                Scan and apply Config/Mapping for Tables/Entities (into <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />) 
            </summary>
            <param name="builder"> </param>
            <param name="assembly"></param>
        </member>
        <member name="M:Elect.Data.EF.Utils.ModelBuilderUtils.ModelBuilderExtensions.DisableCascadingDelete(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
                Set Delete Behavior as Restrict in Relationship for disable cascading delete 
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Elect.Data.EF.Utils.ModelBuilderUtils.ModelBuilderExtensions.RemovePluralizingTableNameConvention(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
                Remove plural table name 
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="M:Elect.Data.EF.Utils.ModelBuilderUtils.ModelBuilderExtensions.ReplaceTableNameConvention(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String)">
            <summary>
                Replace table name by new value 
            </summary>
            <param name="modelBuilder"></param>
            <param name="oldValue">    </param>
            <param name="newValue">    </param>
        </member>
        <member name="M:Elect.Data.EF.Utils.ModelBuilderUtils.ModelBuilderExtensions.ReplaceColumnNameConvention(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String)">
            <summary>
                Replace table name by new value 
            </summary>
            <param name="modelBuilder"></param>
            <param name="oldValue">    </param>
            <param name="newValue">    </param>
        </member>
    </members>
</doc>
