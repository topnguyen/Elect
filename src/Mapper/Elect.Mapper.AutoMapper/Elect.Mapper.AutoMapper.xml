<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Elect.Mapper.AutoMapper</name>
    </assembly>
    <members>
        <member name="M:Elect.Mapper.AutoMapper.IQueryableUtils.IQueryableExtensions.QueryTo``1(System.Linq.IQueryable,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
                Extension method to project from a queryable using the provided mapping engine 
            </summary>
            <remarks> Projections are only calculated once and cached </remarks>
            <typeparam name="TDestination"> Destination type </typeparam>
            <param name="source">          Queryable source </param>
            <param name="membersToExpand"> Explicit members to expand </param>
            <returns>
                Queryable result, use queryable extension methods to project and execute result
            </returns>
        </member>
        <member name="M:Elect.Mapper.AutoMapper.IQueryableUtils.IQueryableExtensions.QueryTo``1(System.Linq.IQueryable,System.Collections.Generic.IDictionary{System.String,System.Object},System.String[])">
            <summary>
                Projects the source type to the destination type given the mapping configuration 
            </summary>
            <typeparam name="TDestination"> Destination type to map to </typeparam>
            <param name="source">          Queryable source </param>
            <param name="parameters">     
                Optional parameter object for parameter mapping expressions
            </param>
            <param name="membersToExpand"> Explicit members to expand </param>
            <returns>
                Queryable result, use queryable extension methods to project and execute result
            </returns>
        </member>
        <member name="M:Elect.Mapper.AutoMapper.IQueryableUtils.IQueryableHelper.QueryTo``1(System.Linq.IQueryable,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
                Extension method to project from a queryable using the provided mapping engine 
            </summary>
            <remarks> Projections are only calculated once and cached </remarks>
            <typeparam name="TDestination"> Destination type </typeparam>
            <param name="source">          Queryable source </param>
            <param name="membersToExpand"> Explicit members to expand </param>
            <returns>
                Queryable result, use queryable extension methods to project and execute result
            </returns>
        </member>
        <member name="M:Elect.Mapper.AutoMapper.IQueryableUtils.IQueryableHelper.QueryTo``1(System.Linq.IQueryable,System.Collections.Generic.IDictionary{System.String,System.Object},System.String[])">
            <summary>
                Projects the source type to the destination type given the mapping configuration 
            </summary>
            <typeparam name="TDestination"> Destination type to map to </typeparam>
            <param name="source">          Queryable source </param>
            <param name="parameters">     
                Optional parameter object for parameter mapping expressions
            </param>
            <param name="membersToExpand"> Explicit members to expand </param>
            <returns>
                Queryable result, use queryable extension methods to project and execute result
            </returns>
        </member>
        <member name="M:Elect.Mapper.AutoMapper.IServiceCollectionExtensions.AddElectAutoMapper(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Add Auto Mapper auto scan and register profile to Mapper Configuration by current
                application assembly,
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Elect.Mapper.AutoMapper.IServiceCollectionExtensions.AddElectAutoMapper(Microsoft.Extensions.DependencyInjection.IServiceCollection,Elect.Mapper.AutoMapper.Models.ElectAutoMapperOptions)">
            <summary>
                Add Auto Mapper auto scan and register profile to Mapper Configuration by current
                application assembly,
            </summary>
            <param name="services"> </param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Elect.Mapper.AutoMapper.IServiceCollectionExtensions.AddElectAutoMapper(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Elect.Mapper.AutoMapper.Models.ElectAutoMapperOptions})">
            <summary>
                Add Auto Mapper auto scan and register profile to Mapper Configuration by assembly,
                default is use current runtime application assembly.
            </summary>
            <param name="services"> </param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="P:Elect.Mapper.AutoMapper.Models.ElectAutoMapperOptions.ListAssemblyFolderPath">
            <summary>
                List assembly folder to scan, default is application base path. 
            </summary>
        </member>
        <member name="P:Elect.Mapper.AutoMapper.Models.ElectAutoMapperOptions.ListAssemblyName">
            <summary>
                List assembly name to scan, default is application name. 
            </summary>
            <remarks>Default is root assembly name, e.g: Elect.Mapper.AutoMapper.dll => Scan Elect.dll and Elect.*.dll </remarks>
        </member>
        <member name="P:Elect.Mapper.AutoMapper.Models.ElectAutoMapperOptions.IMapperLifeTime">
            <summary>
                Lifetime of IMapper, default is Scoped. 
            </summary>
        </member>
        <member name="P:Elect.Mapper.AutoMapper.Models.ElectAutoMapperOptions.IsAssertConfigurationIsValid">
            <summary>
                Assert the mapper profile is valid after finish configuration, default is true. 
            </summary>
        </member>
        <member name="P:Elect.Mapper.AutoMapper.Models.ElectAutoMapperOptions.IsCompileMappings">
            <summary>
                Compile mapping after configuration to boost map speed, default is true. 
            </summary>
        </member>
        <member name="M:Elect.Mapper.AutoMapper.ObjUtils.ObjExtensions.MapTo``1(System.Object)">
            <summary>
                Converts an object to another using AutoMapper library. Creates a new object of
                <typeparamref name="TDestination" />. There must be a mapping between objects before
                calling this method.
            </summary>
            <typeparam name="TDestination"> Type of the destination object </typeparam>
            <param name="source"> Source object </param>
        </member>
        <member name="M:Elect.Mapper.AutoMapper.ObjUtils.ObjExtensions.MapTo``2(``0,``1)">
            <summary>
                Execute a mapping from the source object to the existing destination object There
                must be a mapping between objects before calling this method.
            </summary>
            <typeparam name="TSource"> Source type </typeparam>
            <typeparam name="TDestination"> Destination type </typeparam>
            <param name="source">      Source object </param>
            <param name="destination"> Destination object </param>
            <returns></returns>
        </member>
        <member name="M:Elect.Mapper.AutoMapper.ObjUtils.ObjHelper.MapTo``1(System.Object)">
            <summary>
                Converts an object to another using AutoMapper library. Creates a new object of
                <typeparamref name="TDestination" />. There must be a mapping between objects before
                calling this method.
            </summary>
            <typeparam name="TDestination"> Type of the destination object </typeparam>
            <param name="source"> Source object </param>
        </member>
        <member name="M:Elect.Mapper.AutoMapper.ObjUtils.ObjHelper.MapTo``2(``0,``1)">
            <summary>
                Execute a mapping from the source object to the existing destination object There
                must be a mapping between objects before calling this method.
            </summary>
            <typeparam name="TSource"> Source type </typeparam>
            <typeparam name="TDestination"> Destination type </typeparam>
            <param name="source">      Source object </param>
            <param name="destination"> Destination object </param>
            <returns></returns>
        </member>
    </members>
</doc>
