<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Elect.Core</name>
    </assembly>
    <members>
        <member name="M:Elect.Core.ActionUtils.ActionExtensions.GetValue``1(System.Action{``0})">
            <summary>
                Get instance of T from Action 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Elect.Core.ActionUtils.ActionHelper.GetValue``1(System.Action{``0})">
            <summary>
                Get instance of T from Action 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Elect.Core.ActionUtils.ActionHelper.IgnoreError(System.Action,System.Action{System.Exception})">
            <summary>
                Invoke/Run an operation and ignores any exceptions.
            </summary>
            <param name="operation">lambda that performs an operation that may throw exception</param>
            <param name="onError">Do your logic on error occur</param>
            <returns>True if don't have any exception, false if occur an error.</returns>
        </member>
        <member name="M:Elect.Core.ActionUtils.ActionHelper.IgnoreError``1(System.Func{``0},System.Action{System.Exception},``0)">
            <summary>
                Invoke/Run an operation and ignores any exceptions.
            </summary>
            <param name="operation">lambda that performs an operation that may throw exception</param>
            <param name="onError">Do your logic on error occur</param>
            <param name="defaultValue">Default value returned if operation fail</param>
            <returns>Actual result if don't have any exception, default value if occur an error.</returns>
        </member>
        <member name="M:Elect.Core.AssemblyUtils.AssemblyLoader.Load(System.Reflection.AssemblyName)">
            <inheritdoc />
            <summary>
                Load an assembly, if the assembly already loaded then return 
            </summary>
            <param name="assemblyName"></param>
            <returns></returns>
        </member>
        <member name="T:Elect.Core.Attributes.CanBeNullAttribute">
            <summary>
                Indicates that the value of the marked element could be <c> null </c> sometimes, so the
                check for <c> null </c> is necessary before its usage
            </summary>
        </member>
        <member name="T:Elect.Core.Attributes.NotNullAttribute">
            <summary>
                Indicates that the value of the marked element could never be <c> null </c> 
            </summary>
        </member>
        <member name="M:Elect.Core.CheckUtils.CheckHelper.CheckNullOrWhiteSpace(System.String,System.String)">
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Elect.Core.ConcurrentUtils.ElectMessageQueue`1">
            <inheritdoc />
            <summary>
                Override <see cref="M:Elect.Core.ConcurrentUtils.Models.ElectMessageQueue`1.Execute(System.Collections.Generic.ICollection{`0})" /> to write your job
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Elect.Core.ConfigUtils.IConfigurationExtensions.GetValueByEnv``1(Microsoft.Extensions.Configuration.IConfiguration,System.String)">
            <summary>
                Get Value follow Priority: Key:[Machine Name] &gt; Key:[Environment] &gt; Key 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configuration"></param>
            <param name="key">          </param>
            <returns></returns>
        </member>
        <member name="M:Elect.Core.ConfigUtils.IConfigurationHelper.GetValueByEnv``1(Microsoft.Extensions.Configuration.IConfiguration,System.String)">
            <summary>
                Get Value follow Priority: Key:[Machine Name] &gt; Key:[Environment] &gt; Key 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configuration"></param>
            <param name="key">          </param>
            <returns></returns>
        </member>
        <member name="F:Elect.Core.Constants.Formatting.DateTimeOffSetFormat">
            <summary>
                Isolate Datetime Format 
            </summary>
        </member>
        <member name="M:Elect.Core.DateTimeUtils.DateTimeExtensions.WithTimeZone(System.DateTime,System.String)">
            <param name="dateTime">  </param>
            <param name="timeZoneId"> Time Zone ID, See more: https://msdn.microsoft.com/en-us/library/gg154758.aspx </param>
        </member>
        <member name="M:Elect.Core.DateTimeUtils.DateTimeHelper.WithTimeZone(System.DateTime,System.String)">
            <param name="dateTime">  </param>
            <param name="timeZoneId"> Time Zone ID, See more: https://msdn.microsoft.com/en-us/library/gg154758.aspx </param>
        </member>
        <member name="M:Elect.Core.DateTimeUtils.DateTimeHelper.GetTimeZoneInfo(System.String)">
            <summary>
                Support find time zone id by difference platform: Windows, Mac, Linux. 
            </summary>
            <param name="timeZoneId"></param>
            <returns></returns>
        </member>
        <member name="M:Elect.Core.DateTimeUtils.DateTimeHelper.TryGetTimeZoneInfo(System.String,System.TimeZoneInfo@)">
            <summary>
                Support find time zone id by difference platform: Windows, Mac, Linux. 
            </summary>
            <param name="timeZoneId">  </param>
            <param name="timeZoneInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Elect.Core.GuidUtils.GuidHelper.Generate">
            <summary>
                <para>
                    Generate a new sequential <see cref="T:System.Guid" /> using the <c> comb </c> algorithm.
                </para>
                <para>
                    The <c> comb </c> algorithm is designed to make the use of GUIDs as Primary Keys,
                    Foreign Keys, and Indexes nearly as efficient as ints.
                </para>
            </summary>
            <returns> A comb Guid. </returns>
        </member>
        <member name="T:Elect.Core.Interfaces.IElectOptions">
            <summary>
                Implement this interface to become one of configuration options in Elect Ecosystem 
            </summary>
        </member>
        <member name="M:Elect.Core.LinqUtils.LinqExtensions.TakeUntil``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
                Continues processing items in a collection until the end condition is true.
            </summary>
        </member>
        <member name="M:Elect.Core.LinqUtils.LinqExtensions.WherePrevious``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
                Compare Through a predicate every element of a list with the previous one
            </summary>
            <param name="collection"></param>
            <param name="predicate"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <example>
                var items = new List{int} { 1, 5, 7, 3, 10, 9, 6}; 
                var result = items.WherePrevious((first, second) => second > first); => Result is 5, 7, 10
            </example>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Elect.Core.LinqUtils.LinqExtensions.Randomize``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Random items position inside the source
            </summary>
            <param name="source"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Elect.Core.LinqUtils.LinqExtensions.ToList``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                ToList() with an extra capacity argument. This can boost the speed of creating the list.
            </summary>
            <param name="source"></param>
            <param name="capacity"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:Elect.Core.ObjUtils.ElectDisposableModel">
            <inheritdoc />
        </member>
        <member name="M:Elect.Core.SecurityUtils.SecurityHelper.HashPassword(System.String,System.String,System.Int32)">
            <summary>
                Encrypt Password by Rfc 2898 DeriveBytes - PBKDF2 
            </summary>
        </member>
        <member name="M:Elect.Core.SecurityUtils.SecurityHelper.HashPassword(System.String,System.String@,System.Int32)">
            <summary>
                Encrypt Password by Rfc 2898 DeriveBytes - PBKDF2 
            </summary>
        </member>
        <member name="M:Elect.Core.SecurityUtils.SecurityHelper.Encrypt(System.String,System.String)">
            <summary>
                Encrypt by Rfc 2898 DeriveBytes - PBKDF2 
            </summary>
            <param name="value"></param>
            <param name="key">  </param>
            <returns></returns>
        </member>
        <member name="M:Elect.Core.SecurityUtils.SecurityHelper.Decrypt(System.String,System.String)">
            <summary>
                Decrypt by Rfc 2898 DeriveBytes - PBKDF2 
            </summary>
            <param name="value"></param>
            <param name="key">  </param>
            <returns></returns>
        </member>
        <member name="M:Elect.Core.SecurityUtils.SecurityHelper.TryDecrypt(System.String,System.String,System.String@)">
            <summary>
                Try to Decrypt by Rfc 2898 DeriveBytes - PBKDF2 
            </summary>
            <param name="value"> </param>
            <param name="key">   </param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:Elect.Core.SimilarityUtils.JaroWinkler">
            The Jaro–Winkler distance metric is designed and best suited for short
            strings such as person names, and to detect typos; it is (roughly) a
            variation of Damerau-Levenshtein, where the substitution of 2 close
            characters is considered less important then the substitution of 2 characters
            that a far from each other.
            Jaro-Winkler was developed in the area of record linkage (duplicate
            detection) (Winkler, 1990). It returns a value in the interval [0.0, 1.0].
            The distance is computed as 1 - Jaro-Winkler similarity.
        </member>
        <member name="P:Elect.Core.SimilarityUtils.JaroWinkler.Threshold">
            <summary>
                The current value of the threshold used for adding the Winkler bonus. The default value is 0.7.
            </summary>
        </member>
        <member name="M:Elect.Core.SimilarityUtils.JaroWinkler.#ctor">
            <summary>
                Creates a new instance with default threshold (0.7)
            </summary>
        </member>
        <member name="M:Elect.Core.SimilarityUtils.JaroWinkler.#ctor(System.Double)">
            <summary>
                Creates a new instance with given threshold to determine when Winkler bonus should
                be used. Set threshold to a negative value to get the Jaro distance.
            </summary>
            <param name="threshold"></param>
        </member>
        <member name="M:Elect.Core.SimilarityUtils.JaroWinkler.Similarity(System.String,System.String)">
            <summary>
                Compute Jaro-Winkler similarity.
            </summary>
            <param name="s1">The first string to compare.</param>
            <param name="s2">The second string to compare.</param>
            <returns>The Jaro-Winkler similarity in the range [0, 1]</returns>
            <exception cref="T:System.ArgumentNullException">If s1 or s2 is null.</exception>
        </member>
        <member name="M:Elect.Core.SimilarityUtils.JaroWinkler.Distance(System.String,System.String)">
            <summary>
                Return 1 - similarity.
            </summary>
            <param name="s1">The first string to compare.</param>
            <param name="s2">The second string to compare.</param>
            <returns>1 - similarity</returns>
            <exception cref="T:System.ArgumentNullException">If s1 or s2 is null.</exception>
        </member>
        <member name="T:Elect.Core.StringUtils.Safe32Encoding">
            <summary>
                Class used for conversion between byte array and Base32 notation 
            </summary>
        </member>
        <member name="F:Elect.Core.StringUtils.Safe32Encoding.InByteSize">
            <summary>
                Size of the regular byte in bits 
            </summary>
        </member>
        <member name="F:Elect.Core.StringUtils.Safe32Encoding.OutByteSize">
            <summary>
                Size of converted byte in bits 
            </summary>
        </member>
        <member name="F:Elect.Core.StringUtils.Safe32Encoding.Base32Alphabet">
            <summary>
                Alphabet 
            </summary>
        </member>
        <member name="M:Elect.Core.StringUtils.Safe32Encoding.EncodeBytes(System.Byte[])">
            <summary>
                Convert byte array to Base32 format 
            </summary>
            <param name="bytes"> An array of bytes to convert to Base32 format </param>
            <returns> Returns a string representing byte array </returns>
        </member>
        <member name="M:Elect.Core.StringUtils.Safe32Encoding.DecodeBytes(System.String)">
            <summary>
                Convert base32 string to array of bytes 
            </summary>
            <param name="base32String"> Base32 string to convert </param>
            <returns> Returns a byte array converted from the string </returns>
        </member>
        <member name="T:Elect.Core.StringUtils.Safe64Encoding">
            <summary>
                This encoding produces a 'url' safe string from bytes, similar to base64 encoding yet it
                replaces '+' with '-', '/' with '_' and omits padding.
            </summary>
        </member>
        <member name="M:Elect.Core.StringUtils.Safe64Encoding.EncodeBytes(System.Byte[])">
            <summary>
                Returns a encoded string of ascii characters that are URI safe 
            </summary>
        </member>
        <member name="M:Elect.Core.StringUtils.Safe64Encoding.EncodeBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Returns a encoded string of ascii characters that are URI safe 
            </summary>
        </member>
        <member name="M:Elect.Core.StringUtils.Safe64Encoding.EncodeBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
                Returns a encoded string of ascii characters that are URI safe 
            </summary>
        </member>
        <member name="M:Elect.Core.StringUtils.Safe64Encoding.DecodeBytes(System.String)">
            <summary>
                Decodes the ascii text from the bytes provided into the original byte array 
            </summary>
        </member>
        <member name="M:Elect.Core.StringUtils.Safe64Encoding.DecodeBytes(System.String,System.Int32,System.Int32)">
            <summary>
                Decodes the ascii text from the bytes provided into the original byte array 
            </summary>
        </member>
        <member name="M:Elect.Core.StringUtils.Safe64Encoding.DecodeBytes(System.Byte[])">
            <summary>
                Decodes the ascii text from the bytes provided into the original byte array 
            </summary>
        </member>
        <member name="M:Elect.Core.StringUtils.Safe64Encoding.DecodeBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Decodes the ascii text from the bytes provided into the original byte array 
            </summary>
        </member>
        <member name="M:Elect.Core.StringUtils.Safe64Encoding.DecodeBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
                Decodes the ascii text from the bytes provided into the original byte array 
            </summary>
        </member>
        <member name="M:Elect.Core.StringUtils.StringHelper.Normalize(System.String)">
            <summary>
                Normalize: UPPER case with remove all diacritic (accents) and convert edge case to
                           normal char in string
            </summary>
            <param name="value"></param>
            <returns></returns>
            <remarks>
                <para>
                    If value is is <c> null </c> or <c> whitespace </c> will return <c> empty string </c>
                </para>
                <para> See more: https://docs.microsoft.com/en-us/visualstudio/code-quality/ca1308-normalize-strings-to-uppercase </para>
            </remarks>
        </member>
        <member name="M:Elect.Core.StringUtils.StringHelper.RemoveAccents(System.String)">
            <summary>
                Remove all diacritics (accents) in string 
            </summary>
            <param name="value"></param>
            <returns></returns>
            <remarks> Already handle edge case <see cref="M:Elect.Core.StringUtils.StringHelper.ConvertEdgeCases(System.Char)" /> </remarks>
        </member>
        <member name="T:Elect.Core.StringUtils.StringWriterWithEncoding">
            <summary>
                <para>
                    The <see cref="T:System.IO.StringWriter" /> class always outputs UTF-16 encoded
                    strings. To use a different encoding, we must inherit from <see cref="T:System.IO.StringWriter" />.
                </para>
            </summary>
        </member>
        <member name="M:Elect.Core.XmlUtils.XmlHelper.FromXmlString``1(System.String)">
            <summary>
                To serialize string XML to object 
            </summary>
        </member>
    </members>
</doc>
