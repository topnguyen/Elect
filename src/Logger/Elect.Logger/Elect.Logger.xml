<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Elect.Logger</name>
    </assembly>
    <members>
        <member name="P:Elect.Logger.Logging.ElectLog.BeforeLog">
            <inheritdoc />
        </member>
        <member name="P:Elect.Logger.Logging.ElectLog.AfterLog">
            <inheritdoc />
        </member>
        <member name="P:Elect.Logger.Logging.IElectLog.BeforeLog">
            <summary>
                Modify log info or do some logic before Elect write log.
            </summary>
        </member>
        <member name="P:Elect.Logger.Logging.IElectLog.AfterLog">
            <summary>
                Modify log info or do some logic after Elect write log.
            </summary>
        </member>
        <member name="M:Elect.Logger.Logging.IElectLog.Capture(System.String,Elect.Logger.Models.Logging.LogType,Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
                Capture/Log the message
            </summary>
            <param name="message">Message</param>
            <param name="type">Log Type</param>
            <param name="httpContext">Http context when capture the message</param>
            <param name="jsonFilePath"> Override file path of Config, can be absolute or relative file path</param>
            <returns></returns>
        </member>
        <member name="M:Elect.Logger.Logging.IElectLog.Capture(System.Exception,Elect.Logger.Models.Logging.LogType,Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
                Capture/Log the exception
            </summary>
            <param name="exception">Exception</param>
            <param name="type">Log Type</param>
            <param name="httpContext">Http context when capture the exception</param>
            <param name="jsonFilePath"> Override file path of Config, can be absolute or relative file path</param>
            <returns></returns>
        </member>
        <member name="M:Elect.Logger.Logging.IElectLog.Capture(System.Object,Elect.Logger.Models.Logging.LogType,Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
                Capture/Log the object data
            </summary>
            <param name="obj">Data</param>
            <param name="type">Log Type</param>
            <param name="httpContext">Http context when capture the data</param>
            <param name="jsonFilePath"> Override file path of Config, can be absolute or relative file path</param>
            <returns></returns>
        </member>
        <member name="M:Elect.Logger.Logging.IElectLog.Capture(Elect.Logger.Models.Logging.LogModel)">
            <summary>
                Capture/log info by log model
            </summary>
            <param name="log"></param>
            <returns></returns>
        </member>
        <member name="P:Elect.Logger.Logging.Models.ElectLogOptions.JsonFilePath">
            <summary>
                Relative Path of Json File, default is Logs/{yyyy-MM-dd}.json
            </summary>
            <remarks>Path.GetFullPath(JsonFilePath) to get full path of json files</remarks>
        </member>
        <member name="P:Elect.Logger.Logging.Models.ElectLogOptions.BatchSize">
            <summary>
                Batch size for log message queue
            </summary>
            <remarks>Default is 20</remarks>
        </member>
        <member name="P:Elect.Logger.Logging.Models.ElectLogOptions.Threshold">
            <summary>
                Threshold for log message queue
            </summary>
            <remarks>Default is 5 seconds</remarks>
        </member>
        <member name="P:Elect.Logger.Logging.Models.ElectLogOptions.IsLogFullInfo">
            <summary>
                Limit log information,
                if false will force null for <see cref="T:Elect.Logger.Models.Logging.LogModel"/>
                <see cref="P:Elect.Logger.Models.Logging.LogModel.Runtime"/>, <see cref="P:Elect.Logger.Models.Logging.LogModel.Sdk"/>,
                <see cref="P:Elect.Logger.Models.Logging.LogModel.EnvironmentModel"/>, <see cref="P:Elect.Logger.Models.Logging.LogModel.HttpContext"/>.
            </summary>
            <remarks>Default is false</remarks>
        </member>
        <member name="P:Elect.Logger.Logging.Models.ElectLogOptions.Url">
            <summary>
                Api Document Endpoint, default is "/developers/logs". 
            </summary>
            <remarks> Must start with "/" </remarks>
        </member>
        <member name="P:Elect.Logger.Logging.Models.ElectLogOptions.AccessKey">
            <summary>
                Access Key via uri param "key" 
            </summary>
            <remarks>Default is "" - allow anonymous</remarks>
        </member>
        <member name="P:Elect.Logger.Logging.Models.ElectLogOptions.UnAuthorizeMessage">
            <summary>
                Un-authorize message when user access Log Dashboard with not correct key
            </summary>
            <remarks>Default is "You don't have permission to view Log Dashboard, please contact your administrator."</remarks>
        </member>
        <member name="P:Elect.Logger.Logging.Models.ElectLogOptions.BeforeLogResponse">
            <summary>
               By default when user access Log Dashboard Url. <br />
               Support filter log detail by query strings "skip" (int), "take" (int), "type" (string), "exception_place" (string), "message" (string) <br />
               Then you can handle more by add Func BeforeLogResponse. 
            </summary>
            <remarks>The query string "full_info" (bool) auto apply before response after this Func</remarks>
        </member>
        <member name="M:Elect.Logger.Utils.CreditCardHelper.Filter(System.String)">
            <summary>
                Filters credit card numbers from the input.
            </summary>
            <param name="input">
            The input.
            </param>
            <returns>
                The <see cref="T:System.String"/> with credit card numbers removed.
            </returns>
        </member>
        <member name="M:Elect.Logger.Utils.CreditCardHelper.IsValidCreditCardNumber(System.String)">
            <summary>
                Validates a credit card number using Luhn algorithm.
                Extremely fast Luhn algorithm implementation, based on 
                pseudo code from Cliff L. Biffle (http://microcoder.livejournal.com/17175.html)
                Copyleft Thomas @ Orb of Knowledge:
                http://orb-of-knowledge.blogspot.com/2009/08/extremely-fast-luhn-function-for-c.html
            </summary>
            <param name="number">
                The credit card number.
            </param>
            <returns>
                True if a valid credit card number; otherwise false.
            </returns>
        </member>
    </members>
</doc>
