<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Elect.Logger.Models</name>
    </assembly>
    <members>
        <member name="P:Elect.Logger.Models.Event.EventModel.EndedTime">
            <summary>
                Only Visit have End Time
            </summary>
        </member>
        <member name="P:Elect.Logger.Models.Event.EventModel.Element">
            <summary>
                Canbe a Page/Screen/Popup or Element in a Screen
            </summary>
        </member>
        <member name="P:Elect.Logger.Models.Event.RefererModel.Domain">
            <summary>
                Referer root domain
            </summary>
        </member>
        <member name="P:Elect.Logger.Models.Event.RefererModel.Url">
            <summary>
                Referer full URL
            </summary>
        </member>
        <member name="T:Elect.Logger.Models.Event.UtmModel">
            <summary>
                Urchin Tracking Module (UTM)
            </summary>
        </member>
        <member name="P:Elect.Logger.Models.Event.UtmModel.WebSiteUrl">
            <summary>
                Where user is going
            </summary>
        </member>
        <member name="P:Elect.Logger.Models.Event.UtmModel.CampaignSource">
            <summary>
                Where user is coming form - Source. e.g: twitter, facebook, pinterest
            </summary>
        </member>
        <member name="P:Elect.Logger.Models.Event.UtmModel.CampaignMedium">
            <summary>
                How do user get them - Type of Source, or place/site in system. e.g: social, ecommerce, cpc, banner,
                email
            </summary>
        </member>
        <member name="P:Elect.Logger.Models.Event.UtmModel.CampaignName">
            <summary>
                Why is user going there - Compaign or Product name
            </summary>
        </member>
        <member name="P:Elect.Logger.Models.Logging.ElectExceptionFrame.AbsolutePath">
            <summary>
                Gets or sets the absolute path.
            </summary>
            <value>
                The absolute path.
            </value>
        </member>
        <member name="P:Elect.Logger.Models.Logging.ElectExceptionFrame.InApp">
            <summary>
                Signifies whether this frame is related to the execution of the relevant code in this
                stacktrace. For example, the frames that might power the framework’s webserver of your
                app are probably not relevant, however calls to the framework’s library once you start
                handling code likely are.
            </summary>
            <value>
                <c>true</c> unless the StackFrame is part of the System namespace.
            </value>
        </member>
        <member name="M:Elect.Logger.Models.Logging.ElectExceptionFrame.DemangleAsyncFunctionName">
            <summary>
                Clean up function and module names produced from `async` state machine calls.
            </summary>
            <para>
                When the Microsoft cs.exe compiler compiles some modern C# features,
                such as async/await calls, it can create synthetic function names that
                do not match the function names in the original source code. Here we
                reverse some of these transformations, so that the function and module
                names that appears in the Sentry UI will match the function and module
                names in the original source-code.
            </para>
        </member>
        <member name="M:Elect.Logger.Models.Logging.ElectExceptionFrame.DemangleAnonymousFunction">
            <summary>
                Clean up function names for anonymous lambda calls.
            </summary>
        </member>
        <member name="M:Elect.Logger.Models.Logging.LogModel.#ctor(System.Object,Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
                New Instance of Log Model
            </summary>
            <param name="obj">
                Canbe an Exception or any object (will be serialize to Json String and store in Message property)
            </param>
            <param name="httpContext">HttpContext of current request if have</param>
        </member>
        <member name="M:Elect.Logger.Models.Logging.Utils.EnvironmentHelper.GetOsPlatform">
            <summary>
                Get OS platform
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
